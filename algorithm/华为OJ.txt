
华为OJ

目标 ：
	1. 拿下华为 SO
	2. OJ平台上面分数要达到 >=15000
	3. 意向工作地 杭州研究所 深圳 武汉 

CSDN 华为OJ 链接：
		

尼科彻斯定理

LinkedHashMap 删除某个结点后 下一个节点找不到了 不要删除 不做输出处理即可	
	// 3.遍历map，将所有的value与min比较，若相等，则删除，更改map
	for (Entry<Character, Integer> entry : map.entrySet()) {
		if (entry.getValue() == min) {
			map.remove(entry.getKey());
		}
	}

数组排序 调用库函数	 默认升序
Arrays.sort(arr);

列表排序 
Collections.sort(list)

set的初始化和遍历
Set setTmp = new HashSet();

在遍历 集合过程中，最好不能对集合本身进行操作

string 判断相等 用equals 不要用==
"0".equals(list.get(i))

字符串分割 尚未做出来

求立方根

完全数计算

参数解析 作对
xcopy /s "C:\program files" "d:\"

	static boolean isAbr(char ch) {
		if ((ch <= 'Z' && ch >= 'A') || (ch <= 'z' && ch >= 'a'))
			return true;
		return false;
	}

拆分特殊字符	

http://blog.csdn.net/scy411082514/article/details/7987852

------------------------------------------------
注意：字符串操作的很多函数传参数是正则表达式 

Split()---"." "|" "*" "\" "]" 	
关于点的问题是用string.split("[.]") 解决。或者 用string.split("\\.") 解决。
关于竖线的问题用 string.split("\\|")解决。
关于星号的问题用 string.split("\\*")解决。
关于斜线的问题用 sring.split("\\\\")解决。
关于中括号的问题用 sring.split("\\[\\]")解决。 
------------------------------------------------

如果涉及到堆栈，队列等操作，应该考虑用List，
对于需要快速插入，删除元素，应该使用LinkedList，
如果需要快速随机访问元素，应该使用ArrayList。
------------------------------------------------


尽量返回接口而非实际的类型，如返回List而非ArrayList，这样如果以后需要将ArrayList换成LinkedList时，客户端代码不用改变。

E:\V1R2\product\fpgadrive.c 1
E:\V1R2\product\fpgadrive.c 2
E:\V1R2\product\fpgadrive.c 3
E:\V1R2\product\fpgadrive.c 4
E:\V1R2\product\fpgadrive.c 5
E:\V1R2\product\fpgadrive.c 6
E:\V1R2\product\fpgadrive.c 7
E:\V1R2\product\fpgadrive.c 8
E:\V1R2\product\fpgadrive.c 1
E:\V1R2\product\fpgadrive.c 9
E:\V1R2\product\fpgadrive.c 10
E:\V1R2\product\fpgadrive.c 11


序列化和反序列化
http://www.itmian4.com/thread-8783-1-1.html
(出处: IT面试 专业的IT面试社区)

三、序列化和反序列化的组件
典型的序列化和反序列化过程往往需要如下组件：
•IDL（Interface description language）文件：参与通讯的各方需要对通讯的内容需要做相关的约定（Specifications）。为了建立一个与语言和平台无关的约定，这个约定需要采用与具体开发语言、平台无关的语言来进行描述。这种语言被称为接口描述语言（IDL），采用IDL撰写的协议约定称之为IDL文件。
•IDL Compiler：IDL文件中约定的内容为了在各语言和平台可见，需要有一个编译器，将IDL文件转换成各语言对应的动态库。
•Stub/Skeleton Lib：负责序列化和反序列化的工作代码。Stub是一段部署在分布式系统客户端的代码，一方面接收应用层的参数，并对其序列化后通过底层协议栈发送到服务端，另一方面接收服务端序列化后的结果数据，反序列化后交给客户端应用层；Skeleton部署在服务端，其功能与Stub相反，从传输层接收序列化参数，反序列化后交给服务端应用层，并将应用层的执行结果序列化后最终传送给客户端Stub。
•Client/Server：指的是应用层程序代码，他们面对的是IDL所生存的特定语言的class或struct。
•底层协议栈和互联网：序列化之后的数据通过底层的传输层、网络层、链路层以及物理层协议转换成数字信号在互联网中传递。

选型建议
以上描述的五种序列化和反序列化协议都各自具有相应的特点，适用于不同的场景：
1、对于公司间的系统调用，如果性能要求在100ms以上的服务，基于XML的SOAP协议是一个值得考虑的方案。
2、基于Web browser的Ajax，以及Mobile app与服务端之间的通讯，JSON协议是首选。对于性能要求不太高，或者以动态类型语言为主，或者传输数据载荷很小的的运用场景，JSON也是非常不错的选择。
3、对于调试环境比较恶劣的场景，采用JSON或XML能够极大的提高调试效率，降低系统开发成本。
4、当对性能和简洁性有极高要求的场景，Protobuf，Thrift，Avro之间具有一定的竞争关系。
5、对于T级别的数据的持久化应用场景，Protobuf和Avro是首要选择。如果持久化后的数据存储在Hadoop子项目里，Avro会是更好的选择。
6、由于Avro的设计理念偏向于动态类型语言，对于动态语言为主的应用场景，Avro是更好的选择。
7、对于持久层非Hadoop项目，以静态类型语言为主的应用场景，Protobuf会更符合静态类型语言工程师的开发习惯。
8、如果需要提供一个完整的RPC解决方案，Thrift是一个好的选择。
9、如果序列化之后需要支持不同的传输层协议，或者需要跨防火墙访问的高性能场景，Protobuf可以优先考虑。



123_4567_8888 M
123_4567_88x8 E
223_4567_8888 E
4567_8888 E
6567_8888 P
8567_8888 P
4567_88d8 E

123_4567_8888
123_4567_88x8
223_4567_8888
4567_8888
6567_8888
8567_8888
4567_88d8



http://blog.csdn.net/radic_feng/article/details/6844844



4
0 3
2 5
4 2
4 0


总体思路：
1.技术上选择最可靠的；
2.抢资格过程要最简化，用户只需点一个抢购按钮，返回结果表示抢购成功或者已经售罄；
3.对抢购请求的处理尽量简化，将I/O操作控制到最少，减少每个请求的时间；
4.尽量去除性能单点，将压力分散，整体性能可以线性扩展；
5.放弃数据强一致性要求，通过异步的方式处理数据。

基本原理：在服务器上，通过一个文件来表示商品是否售罄。
如果文件存在即表示已经售罄。程序接收用户抢购请求后，查看用户是否预约以及是否抢购过，然后检查售罄标志文件是否存在。对预约用户，如果未售罄并且用户未抢购成功过，即返回抢购成功的结果，并记录一条日志。日志通过异步的方式传输到中心控制节点，完成记数等操作。

最后，抢购成功用户的列表异步导入商场系统，抢购成功的用户在接下来的几个小时内下单即可。这样，流量高峰完全被抢购系统挡住，商城系统不需要面对高流量。

在分布式系统的设计中，对持久化数据的处理是影响性能的重要因素。
不去选择传统关系型数据库，而是选用了Redis服务器。

1.首先需要保存的数据是典型的Key/Value对形式，每个UID对应一个字符串数据。传统数据库的复杂功能用不上，用KV库正合适。
2.Redis的数据是in-memory的，可以极大提高查询效率。
3.Redis具有足够用的主从复制机制，以及灵活设定的持久化操作配置。这两点正好是我们需要的。


HTTP服务层主要功能如下：

1.进行基本的URL正确性校验；
2.对恶意访问的用户进行过滤，拦截黄牛；
3.提供用户验证码；
4.将正常访问用户数据放入相应商品队列中；
5.等待业务处理层返回的处理结果。

业务处理层主要功能如下：

1.接收商品队列中的数据；
2.对用户请求进行处理；
3.将请求结果放入相应的返回队列中。



































