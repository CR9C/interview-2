package toOffer;

import java.util.Random;

public class HeapSort {

	// 找出数组中最小的k个值
	public int[] topK(int[] input, int k) {
		if (input == null || input.length == 0 || k == 0) {
			return null;
		}
		if (input.length <= k) {
			return input;
		}
		int[] result = new int[k];
		for (int i = 0; i < k; i++) {
			result[i] = input[i];
		}
		minHeap(result, k - 1);
		for (int i = k; i < input.length; i++) {
			if (input[i] < result[k - 1]) {
				result[k - 1] = input[i];
				minHeap(result, k - 1);
			}
		}
		return result;
	}

	// 使用堆排序将数组升序排序
	public int[] minHeap(int[] input, int scale) {
		if (input == null || input.length == 0 || scale == 0) {
			return null;
		}
		print(input);
		for (int i = scale; i >= 0; i--) {
			findMax(input, i);
			swap(input, 0, i);
			print(input);
		}
		return input;
	}

	// 将最大值移到根节点，即索引为0的位置
	public void findMax(int[] input, int lastIndex) {
		if (lastIndex == 0) {
			return;
		}
		int parent = (lastIndex - 1) / 2;
		for (int i = parent; i >= 0; i--) {
			int left = 2 * i + 1;
			int right = 2 * i + 2;
			if (right <= lastIndex && input[right] > input[i] && input[right] > input[left]) {
				swap(input, right, i);
			}
			if (input[left] > input[i]) {
				swap(input, left, i);
			}
		}
	}

	public void swap(int[] data, int i, int j) {
		if (i == j) {
			return;
		}
		int temp = data[i];
		data[i] = data[j];
		data[j] = temp;
	}

	public void print(int[] data) {
		if (data == null || data.length == 0) {
			return;
		}
		for (int i = 0; i < data.length; i++) {
			System.out.print(data[i] + "\t");
		}
		System.out.println();
	}

	public static void main(String[] args) {
		HeapSort sort = new HeapSort();
		Random random = new Random();
		int len = random.nextInt(15);
		int[] data = new int[len];
		for (int i = 0; i < len; i++) {
			data[i] = random.nextInt(20);
		}
		sort.print(data);
		sort.print(sort.topK(data, data.length / 2));
	}
}
