计算机网络和操作系统
1.
OSI七层模型tcp四层模型是什么样的
	OSI七层参考模型 ：
		应用层:直接向用户提供服务，完成用户希望在网络上完成的各种工作
		表示层:对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层
		会话层:向两个实体的表示层提供建立和使用连接的方法
		传输层:向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输
		网络层:通过路由选择算法，为报文或分组通过通信子网选择最适当的路径
		数据链路层:通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路
		物理层:利用传输介质为数据链路层提供物理连接，实现比特流的透明传输
	TCP/IP:
		应用层：用来处理特定的应用，针对不同的应用提供了不同的协议，例如进行文件传输时用到的FTP协议，发送email用到的SMTP等。
		传输层：主要功能是提供应用程序之间的通信，这一层主要是TCP/UDP协议。
		网络层：处理分组在网络中的活动，例如路由选择和转发等，这一层主要包括IP协议、ARP、ICMP协议等。
		网络接口层：这是协议栈的最低层，对应OSI的物理层和数据链路层，主要完成数据帧的实际发送和接收。


2. TCP/UDP协议
	TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接
	UDP（User Data Protocol，用户数据报协议）是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它
	扔到网络上
	小结TCP与UDP的区别：
		1.基于连接与无连接；
		2.对系统资源的要求（TCP较多，UDP少）；
		3.UDP程序结构较简单；
		4.流模式与数据报模式 ；
		5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。

3. 报文结构

4. DDoS攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。 
	这种攻击方式可分为以下几种：
	1.通过使网络过载来干扰甚至阻断正常的网络通讯；
	2.通过向服务器提交大量请求，使服务器超负荷；
	3.阻断某一用户访问服务器；
	4.阻断某服务与特定系统或个人的通讯。
	
	服务器被DDOS攻击时的现象：
	1.被攻击主机上有大量等待的TCP连接；
	2.网络中充斥着大量的无用的数据包；
	3.源地址为假 制造高流量无用数据，造成网络拥塞，使受害主机无法正常和外界通讯；
	4.利用受害主机提供的传输协议上的缺陷反复高速的发出特定的服务请求，使主机无法处理所有正常请求；
	5.严重时会造成系统死机。	

5.TCP三次握手过程
	1主机A通过向主机B发送一个含有同步序列号的标志位的数据段给主机B,向主机B请求建立连接,通过这个数据段,主机A告诉主机B两件事:我想要和你通信;你可以用哪个序列号作为
	起始数据段来回应我.
	2主机B收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:我已经收到你的请求了,你可以传输数据了;你要用哪佧序
	列号作为起始数据段来回应我
	3 主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:"我已收到回复,我现在要开始传输实际数据了这样3次握手就完成了,主机A和主机B就可以传输数据了.
		
	
2.进程和线程
	1.线程和进程的区别，还有就是什么时候用线程，什么时候用进程
	a.进程的管理和控制信息都放在进程控制模块PCB(Process Control Block),

	b.线程的生命周期
	新生（new born）--就绪(runnable)--运行(running)--阻塞(blocked)--运行(running)--死亡(dead)

	c.进程是指运行中的应用程序，每一个进程都有自己独立的内存空间。一个应用程序可以同时启动多个进程。
	例如对于IE浏览器程序，每打开一个IE浏览器窗口，就启动了一个新的进程。同样，每次执行JDK的java.exe程序，就启动了一个独立的Java虚拟机进程，该进程的任务是解析并执行Java程序代码。(启动两个tomcat,会有2个java虚拟机进程)
	线程是指进程中的一个执行流程，有时也称为执行情景。一个进程可以由多个线程组成，即在一个进程中可以同时运行多个不同的线程，它们分别执行不同的任务。当进程内的多个线程同时运行时，这种运行方式称为并发运行。
	许多服务器程序，如数据库服务器和Web服务器，都支持并发运行，这些服务器能同时响应来自不同客户的请求。
	进程和线程的主要区别在于：每个进程都需要操作系统为其分配独立的内存地址空间，而同一进程中的所有线程在同一块地址空间中工作，这些线程可以共享同一块内存和系统资源，比如共享一个对象或者共享已经打开的一个文件。

	d.下面，我们从调度、并发性、系统开销、拥有资源等方面，来比较线程与进程。
		1．调度
		在传统的操作系统中，拥有资源的基本单位和独立调度、分派的基本单位都是进程。而在引入线程的操作系统中，则把线程作为调度和分派的基本单位。而把进程作为资源拥有的基本单位，使传统进程的两个属性分开，线程便能轻装运行，从而可显著地提高系统的并发程度。
		在同一进程中，线程的切换不会引起进程的切换，在由一个进程中的线程切换到另一个进程中的线程时，将会引起进程的切换。
		2．并发性
		在引入线程的操作系统中，不仅进程之间可以并发执行，而且在一个进程中的多个线程之间，亦可并发执行，因而使操作系统具有更好的并发性，从而能更有效地使用系统资源和提高系统吞吐量。
		例如，在一个未引入线程的单CPU操作系统中，若仅设置一个文件服务进程，当它由于某种原因而被阻塞时，便没有其它的文件服务进程来提供服务。在引入了线程的操作系统中，可以在一个文件服务进程中，设置多个服务线程，当第一个线程等待时，文件服务进程中的第二个线程可以继续运行；当第二个线程阻塞时，第三个线程可以继续执行，从而显著地提高了文件服务的质量以及系统吞吐量。
		3．拥有资源
		不论是传统的操作系统，还是设有线程的操作系统，进程都是拥有资源的一个独立单位，它可以拥有自己的资源。一般地说，线程自己不拥有系统资源(也有一点必不可少的资源，主要是程序计数器、一组寄存器和栈)，但它可以访问其隶属进程的资源。亦即，一个进程的代码段、数据段以及系统资源，如已打开的文件、I/O设备等，可供问一进程的其它所有线程共享。
		4．系统开销
		由于在创建或撤消进程时，系统都要为之分配或回收资源，如内存空间、I／o设备等。因此，操作系统所付出的开销将显著地大于在创建或撤消线程时的开销。类似地，在进行进程切换时，涉及到整个当前进程CPU环境的保存以及新被调度运行的进程的CPU环境的设置。
		而线程切换只须保存和设置少量寄存器的内容，并不涉及存储器管理方面的操作。
		可见，进程切换的开销也远大于线程切换的开销。此外，由于同一进程中的多个线程具有相同的地址空间，致使它们之间的同步和通信的实现，也变得比较容易。

	e.根据进程与线程的设置，操作系统大致分为如下类型： 
		(1) 单进程、单线程，MS-DOS大致是这种操作系统；
		(2) 多进程、单线程，多数UNIX(及类UNIX的LINUX)是这种操作系统；
		(3) 多进程、多线程，Win32(Windows NT/2000/XP等)、Solaris 2.x和OS/2都是这种操作系统；
		(4) 单进程、多线程，VxWorks是这种操作系统。

	f.进程间通信的几种主要手段简介：
		1.管道（Pipe）及有名管道（named pipe）：管道可用于具有亲缘关系进程间的通信，有名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信； 
		2.信号（Signal）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；linux除了支持Unix早期信号语义函数sigal外，还支持语义符合Posix.1标准的信号函数sigaction（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用sigaction函数重新实现了signal函数）； 
		3.报文（Message）队列（消息队列）：消息队列是消息的链接表，包括Posix消息队列system V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。 
		4.共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。 
		
		5.信号量（semaphore）：主要作为进程间以及同一进程不同线程之间的同步手段。 
		6.套接口（Socket）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由Unix系统的BSD分支开发出来的，但现在一般可以移植到其它类Unix系统上：Linux和System V的变种都支持套接字。





