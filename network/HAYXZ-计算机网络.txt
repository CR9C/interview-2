计算机网络
OSI七层模型tcp四层模型是什么样的
	OSI七层参考模型 ：
		应用层:直接向用户提供服务，完成用户希望在网络上完成的各种工作
		表示层:对来自应用层的命令和数据进行解释，对各种语法赋予相应的含义，并按照一定的格式传送给会话层
		会话层:向两个实体的表示层提供建立和使用连接的方法
		传输层:向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输
		网络层:通过路由选择算法，为报文或分组通过通信子网选择最适当的路径
		数据链路层:通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路
		物理层:利用传输介质为数据链路层提供物理连接，实现比特流的透明传输
	TCP/IP:
		应用层：用来处理特定的应用，针对不同的应用提供了不同的协议，例如进行文件传输时用到的FTP协议，发送email用到的SMTP等。
		传输层：主要功能是提供应用程序之间的通信，这一层主要是TCP/UDP协议。
		网络层：处理分组在网络中的活动，例如路由选择和转发等，这一层主要包括IP协议、ARP、ICMP协议等。
		网络接口层：这是协议栈的最低层，对应OSI的物理层和数据链路层，主要完成数据帧的实际发送和接收。


2. TCP/UDP协议
	TCP（Transmission Control Protocol，传输控制协议）是面向连接的协议，也就是说，在收发数据前，必须和对方建立可靠的连接
	UDP（User Data Protocol，用户数据报协议）是一个非连接的协议，传输数据之前源端和终端不建立连接，当它想传送时就简单地去抓取来自应用程序的数据，并尽可能快地把它
	扔到网络上
	小结TCP与UDP的区别：
		1.基于连接与无连接；
		2.对系统资源的要求（TCP较多，UDP少）；
		3.UDP程序结构较简单；
		4.流模式与数据报模式 ；
		5.TCP保证数据正确性，UDP可能丢包，TCP保证数据顺序，UDP不保证。

3. 报文结构

4. DDoS攻击通过大量合法的请求占用大量网络资源，以达到瘫痪网络的目的。 
	这种攻击方式可分为以下几种：
	1.通过使网络过载来干扰甚至阻断正常的网络通讯；
	2.通过向服务器提交大量请求，使服务器超负荷；
	3.阻断某一用户访问服务器；
	4.阻断某服务与特定系统或个人的通讯。
	
	服务器被DDOS攻击时的现象：
	1.被攻击主机上有大量等待的TCP连接；
	2.网络中充斥着大量的无用的数据包；
	3.源地址为假 制造高流量无用数据，造成网络拥塞，使受害主机无法正常和外界通讯；
	4.利用受害主机提供的传输协议上的缺陷反复高速的发出特定的服务请求，使主机无法处理所有正常请求；
	5.严重时会造成系统死机。	

5.TCP三次握手过程
	1.主机A通过向主机B发送一个含有同步序列号的标志位的数据段给主机B,向主机B请求建立连接,通过这个数据段,主机A告诉主机B两件事:我想要和你通信;你可以用哪个序列号作为
	起始数据段来回应我.
	2.主机B收到主机A的请求后,用一个带有确认应答(ACK)和同步序列号(SYN)标志位的数据段响应主机A,也告诉主机A两件事:我已经收到你的请求了,你可以传输数据了;你要用哪佧序
	列号作为起始数据段来回应我
	3.主机A收到这个数据段后,再发送一个确认应答,确认已收到主机B 的数据段:"我已收到回复,我现在要开始传输实际数据了这样3次握手就完成了,主机A和主机B就可以传输数据了.

6.TCP四次挥手过程
	1.客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送
	2.服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号
	3.服务器B关闭与客户端A的连接，发送一个FIN给客户端A
	4.客户端A发回ACK报文确认，并将确认序号设置为收到序号加1

7.为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？
	http://blog.csdn.net/whuslei/article/details/6667471
	这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的建连请求后，它可以把ACK和SYN（ACK起应答作用，而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。
		
8.HTTP协议
http://zsxxsz.iteye.com/blog/568250

9.基本HTTP协议流程是什么?
	1.打开HTTP连接。一定要记住HTTP是一种无状态协议。正因为如此，对于每一个请求你都要建立一个新的连接。
	2.初始化方法请求。这里面将包含一些类型的方法指示符用来描述调用什么方法和方法所需要的参数。
	3.设置HTTP请求头。这里面包含要传送的数据类型(二进制)和数据的总长。
	4.发送请求。将二进制流写到服务器。
	5.读取请求。目标servlet程序将被调用并接受HTTP请求数据。servlet程序就调用所有必要的参数选择相应的方法。注意，如果这是这个客户端的第一次请求，一个服务器对象的新的实例就会被创建。
	6.调用方法。方法将会被服务器端的对象调用。
	7.初始化方法响应。如果调用的方法抛出一个异常，客户将接收到出错信息。否则，返回的类型(如果有)将会被发送。
	8.设置HTTP响应头。在响应头中，一定会设置待发送数据的类型和长度。
	9.发送响应。二进制数据流将从Web服务器发送并返回给客户端。
	10.关闭连接。



