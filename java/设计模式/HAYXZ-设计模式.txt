设计模式


1. spring 中的常用的设计模式
参考链接：
http://ylsun1113.iteye.com/blog/828542

http://www.ibm.com/developerworks/cn/java/j-lo-spring-principle/


1.工厂模式，这个很明显，在各种BeanFactory以及ApplicationContext创建中都用到了；
2.模版模式，这个也很明显，在各种BeanFactory以及ApplicationContext实现中也都用到了；
3.代理模式，在Aop实现中用到了JDK的动态代理；
4.策略模式，第一个地方，加载资源文件的方式，使用了不同的方法，比如：ClassPathResourece，FileSystemResource，ServletContextResource，UrlResource但他们都有共同的借口Resource；第二个地方就是在Aop的实现中，采用了两种不同的方式，JDK动态代理和CGLIB代理；
5.单例模式，这个比如在创建bean的时候。



2.抽象工厂模式-与-工厂方法模式区别 
http://blog.csdn.net/superbeck/article/details/4446177
http://blog.csdn.net/wyxhd2008/article/details/5597975
	工厂方法：抽象产品只有一种
	抽象工厂：抽象产品有多种
	


3. 单例模式的多线程版本
	双检锁
	第一次判空后加锁 防止多次加锁 造成死锁；
	第二次判空 防止加锁后 在多线程场景下失效 创建出多个实例；
	代码会写


接口只是对一类事物的属性和行为更高层次的抽象。对修改关闭，对扩展（不同的实现implements）开放，接口是对开闭原则的一种体现。

4.设计模式中常用的原则：
	面向对象进行分析和设计；
	面向接口编程；
	对扩展开放，对修改封闭的 "开-闭"原则；
	多组合，少继承；
		http://www.cnblogs.com/liuling/archive/2013/05/01/extends.html
		
5.继承与组合
	一：继承
　　继承是Is a 的关系，比如说Student继承Person,则说明Student is a Person。继承的优点是子类可以重写父类的方法来方便地实现对父类的扩展。

　　继承的缺点有以下几点：
　　①：父类的内部细节对子类是可见的。
　　②：子类从父类继承的方法在编译时就确定下来了，所以无法在运行期间改变从父类继承的方法的行为。
　　③：如果对父类的方法做了修改的话（比如增加了一个参数），则子类的方法必须做出相应的修改。所以说子类与父类是一种高耦合，违背了面向对象思想。

	二：组合
	　　组合也就是设计类的时候把要组合的类的对象加入到该类中作为自己的成员变量。
	
	　　组合的优点：
	　　①：当前对象只能通过所包含的那个对象去调用其方法，所以所包含的对象的内部细节对当前对象时不可见的。
	　　②：当前对象与包含的对象是一个低耦合关系，如果修改包含对象的类中代码不需要修改当前对象类的代码。
	　　③：当前对象可以在运行时动态的绑定所包含的对象。可以通过set方法给所包含对象赋值。
	
	　　组合的缺点：
		①：容易产生过多的对象。
		②：为了能组合多个对象，必须仔细对接口进行定义。

	由此可见，组合比继承更具灵活性和稳定性，所以在设计的时候优先使用组合。
	
	只有当下列条件满足时才考虑使用继承：
	•子类是一种特殊的类型，而不只是父类的一个角色
	•子类的实例不需要变成另一个类的对象
	•子类扩展，而不是覆盖或者使父类的功能失效

6.监听器用到的设计模式

	观察者模式:http://wade6.iteye.com/blog/1305787

7.23中设计模式大全

	http://blog.csdn.net/zhangerqing/article/details/8194653
	




















