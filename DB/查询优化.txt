所谓查询优化
首先要了解 数据查询的一些场景 还有优化的必要性 即查询做优化出现的背景

【核心】：对查询进行优化，应尽量避免全表扫描，首先考虑是在 where 及 order by 涉及的列上建立索引。

============================================================
【一、使用索引的角度】
1.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率 特别是数据量大的表

2.一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要

3.关于索引的选择，应该主意：
　　A、根据数据量决定哪些表需要增加索引，数据量小的可以只有主键。
　　B、根据使用频率决定哪些字段需要建立索引，选择经常作为连接条件、筛选条件、聚合查询、排序的字段作为索引的候选字段。
　　C、把经常一起出现的字段组合在一起，组成组合索引，组合索引的字段顺序与主键一样，也需要把最常用的字段放在前面，把重复率低的字段放在前面。
　　D、一个表不要加太多索引，因为索引影响插入和更新的速度。
============================================================

============================================================
【二、字段设计】
1.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。
这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。

2.尽可能的使用varchar/nvarchar代替char/nchar，因为首先变长字段存储空间小，可以节省存储空间；
其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。

3.字段是数据库最基本的单位，其设计对性能的影响是很大的。需要注意如下：
　　A、数据类型尽量用数字型，数字型的比较比字符型的快很多。
　　B、数据类型尽量小，这里的尽量小是指在满足可以预见的未来需求的前提下的。
　　C、 尽量不要允许NULL，除非必要，可以用NOT NULL+DEFAULT代替。
　　D、少用TEXT和IMAGE，二进制字段的读写是比较慢的，而且，读取的方法也不多，大部分情况下最好不用。
　　E、#自增字段#要慎用，不利于数据迁移。
============================================================

============================================================
【外键的设计】
外键作为数据库对象，很多人认为麻烦而不用，实际上，外键在大部分情况下是很有用的，理由是：
　　外键是最高效的一致性维护方法，数据库的一致性要求，依次可以用:
[外键>CHECK约束>规则约束>触发器>客户端程序]，一般认为，离数据越近的方法效率越高。
　　谨慎使用级联删除和级联更新，级联删除和级联更新作为SQL SERVER 2000当年的新功能，在2005作了保留，应该有其可用之处。我这里说的谨慎，是因为级联删除和级联更新有些突破了传统的关于外键的定义，功能有点太过强大，使用前必须确定自己已经把握好其功能范围，否则，级联删除和级联更新可能让你的数据莫名其妙的被修改或者丢失。从性能看级联删除和级联更新是比其他方法更高效的方法。
============================================================

============================================================
【系统设计】
1.整个系统的设计特别是系统结构设计对性能是有很大影响的，对于一般的OLTP系统，可以选择C/S结构、三层的C/S结构等，不同的系统结构其性能的关键也有所不同。
系统设计阶段应该归纳一些业务逻辑放在数据库编程实现，数据库编程包括"数据库存储过程、触发器和函数"。
用数据库编程实现业务逻辑的好处是减少网络流量并可更充分利用数据库的预编译和缓存功能。

2.合理的冗余
完全按照规范化设计的系统几乎是不可能的，除非系统特别的小，在规范化设计后，有计划地加入冗余是必要的。
　　冗余可以是冗余数据库、冗余表或者冗余字段，不同粒度的冗余可以起到不同的作用。
　　冗余可以是为了编程方便而增加，也可以是为了性能的提高而增加。	
从性能角度来说:
冗余数据库可以分散数据库压力，
冗余表可以分散数据量大的表的并发压力，也可以加快特殊查询的速度，
冗余字段可以有效减少数据库表的连接，提高效率。
============================================================

============================================================
【三、存储过程】
1.在所有的存储过程和触发器的开始处设置 SET NOCOUNT ON ，在结束时设置 SET NOCOUNT OFF。无需在执行存储过程和触发器的每个语句后向客户端发送 DONE_IN_PROC 消息。
============================================================

============================================================
【四、业务和事务操作角度】
1.尽量避免大事务操作，提高系统并发能力。

2.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。

============================================================

============================================================
【五、SQL语句写法】
1.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：
select id from t where num is null
可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：
select id from t where num=0

2.应尽量避免在 where 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。

3.应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：
select id from t where num=10 or num=20
可以这样查询：
select id from t where num=10
union all
select id from t where num=20

4.in 和 not in 也要慎用，否则会导致全表扫描，如：
select id from t where num in(1,2,3)
对于连续的数值，能用 between 就不要用 in 了：
select id from t where num between 1 and 3

5.下面的查询也将导致全表扫描：
select id from t where name like '%abc%'
若要提高效率，可以考虑全文检索。

6.如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：
select id from t where num=@num
可以改为强制查询使用索引：
select id from t with(index(索引名)) where num=@num

7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：
select id from t where num/2=100
应改为: 
select id from t where num=100*2

8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：
select id from t where substring(name,1,3)='abc'--name以abc开头的id
select id from t where datediff(day,createdate,'2005-11-30')=0--‘2005-11-30’生成的id
应改为:
select id from t where name like 'abc%'
select id from t where createdate>='2005-11-30' and createdate<'2005-12-1'

9.以上14,15 即 不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。

10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。

11.不要写一些没有意义的查询，如需要生成一个空表结构：
select col1,col2 into #t from t where 1=0
这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：
create table #t(...)

12.很多时候用 exists 代替 in 是一个好的选择：
select num from a where num in(select num from b)
用下面的语句替换：
select num from a where exists(select 1 from b where num=a.num)

13.【去验证】并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。

14.应尽可能的避免更新 【clustered 索引】数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。

15.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。
基本上是全列出 如果有的列根本用不到 则设计时候可以考虑是否有留下的必要
============================================================

============================================================
【六、临时表】
1.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。

2.避免频繁创建和删除临时表，以减少系统表资源的消耗。

3.临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。

4.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。

5.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。
============================================================

============================================================
【七、游标】
1.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。

2.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。

3.与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时 间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。
============================================================

============================================================
【数据库物理存储和环境的设计】
在设计阶段，可以对数据库的物理存储、操作系统环境、网络环境进行必要的设计，
使得我们的系统在将来能适应比较多的用户并发和比较大的数据量。
这里需要注意文件组的作用，适用文件组可以有效把I/O操作分散到不同的物理硬盘，提高并发能力。
============================================================

============================================================
【改进】
结合现有系统（各个版本melody、升级的jresPlus）中SqlMap，提出几点改进意见
1.is_delete 
is_delete查询条件 SqlMap里面是不要写 service做为底层接口 也是不能固定写死的 需由业务确认该参数
queryCount + 大数据量表时 is_delete是否需要创建索引 以及评估其效果

2.select 动态查询语句本身是个好的设计 在SQL层面
开发人员尽量的去使用 
一个特性化的需要重新写的SQl 慎重考虑查询的效率 
更新北金所以后的SQL 然后参看几个 提改进意见

3.

参考：
http://zhidao.baidu.com/link?url=cpDAPYOnEY1R1fYjOyU7n_5hCB6dyVYS4qBV7Rq8xKtgcDJgnNQHvx03-mpDl53D_owVAO7gOXI50jgImkivxx-edbggswVLuIO_H7R_MAu


4.集群环境下的同时读写 
  



















