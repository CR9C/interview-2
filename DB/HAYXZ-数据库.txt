=============================================================================================
【HAYXZ】
1.
oralce 优先级 
not and or

2.重点
分库分表
参见上面

3.
join与left join的区别：
	inner join(等值连接) 只返回两个表中联结字段相等的行
	left join(左联接) 返回包括左表中的所有记录和右表中联结字段相等的记录
	right join(右联接) 返回包括右表中的所有记录和左表中联结字段相等的记录

4.	
查询出M 页的N行数据(分页的实现，求第M页的记录数)
	Select top N from table where id not in (select top (M-1)*N id from table )	

5.	
数据库备份	
oracle中除了数据库备份，还有什么方法备份？
Oracle数据库有三种标准的备份方法，它们分别是导出/导入(EXP/IMP)、热备份和冷备份。
导出备份是一种逻辑备份，冷备份和热备份是物理备份。	

6.	
数据库索引

7.
数据库引擎

8. 查询优化

9.其他积累
	【分库分表】
	1，主从复制，读写分离
	对主库修改数据，查询使用从库。一主多从，来降低数据库读取压力。
	数据库的主从复制能解决访问问题，并不能解决大规模的并发写入问题，要解决这个问题就要考虑mysql数据切分了 分库分表

	2，分库分表
	根据实体业务来分库，分表。如，根据数据的活跃性，根据用户uid等。

	3，mysql 不同存储引擎区别
	InnoDB 用于数据完整性/写性能要求比较高的应用.  热数据 活跃度比较高的 浏览量 账户资金余额 修改时间
	MyISAM 适合查询应用。 冷数据 用户信息 创建时间

=============================================================================================
【春招实习生】
---------------------------------------------------------------------------------------------------------
数据库
1.分页的实现
	三层嵌套

2.删除表的重复记录
	如果记录完全相同才算重复记录,那么:  (sql server2000下测试通过)
	select distinct * into #tmpp from tid
	delete from tid
	insert into tid select * from #tmpp
	drop table #tmpp
	如果有id主键(数字,自增1的那种),那么:(sql server2000下测试通过)
	delete from tableA where id not in
	(select id = min(id) from tableA group by name)

3.delete from tablea ＆ truncate table tablea的区别
	truncate 语句执行速度快,占资源少,并且只记录页删除的日志；
	delete 对每条记录的删除均需要记录日志

4.JDBC中，statement,prepared statement ,Callable statement的区别是什么?
	Statement 接口提供了执行语句和获取结果的基本方法。
	PreparedStatement 接口添加了处理 IN 参数的方法；
	CallableStatement 添加了处理 OUT 参数的方法。是PreparedStatement的子类,它只是用来执行存储过程的.
	
	PreparedStatement:对于同一条语句的多次执行,
	Statement每次都要把SQL语句发送给数据库,这样做效率明显不高,
	而如果数据库支持预编译,PreparedStatement可以先把要执行的语句一次发给它,然后每次执行而不必发送相同的语句,效率当然提高,
	当然如果数据库不支持预编译,PreparedStatement会象Statement一样工作,只是效率不高而不需要用户工手干预.
	另外PreparedStatement还支持接收参数.在预编译后只要传输不同的参数就可以执行,大大提高了性能.

5.说出数据连接池的工作机制是什么？
	J2EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。
	客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其表记为忙。
	如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量有配置参数决定。
	(通过参数可以决定最大连接数是多少，服务器启动的时候建立多少连接，池中需要维持多少空闲连接等。)
	当使用的连接调用完成后，就可以将连接close，这个时候池驱动程序将此连接放回连接池并且标记为空闲，其他调用就可以使用这个连接。

6.事务的几个特性（含义+举例说明）。
事务四大特性(简称ACID)  
　　原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。
　　一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。
		-- 插入数据A， 写进数据还是A，不会变成B
　　隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。
		 -- 事务A 增加数据，事务B删除数据, 互相不影响
　　持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。

7.用MySQL语法建 一个学生表，包括学生姓名、性别、年龄、班级信息。

8.char()与varchar()的区分，什么情况下用char()？（两者区别很重要）
	mysql oracle中都会有的数据类型 
	
	1.char 
char的长度是固定的，比如说，你定义了char(20),即使你你插入abc，不足二十个字节，数据库也会在abc后面自动加上17个空格，以补足二十个字节； 
char是区分中英文的，中文在char中占两个字节，而英文占一个，所以char(20)你只能存20个字母或10个汉字。 
char适用于长度比较固定的，一般不含中文的情况 
	
	2.varchar/varchar2 
	varchar是长度不固定的，比如说，你定义了varchar(20),当你插入abc，则在数据库中只占3个字节。 
	varchar同样区分中英文，这点同char。 
	varchar2基本上等同于varchar，它是oracle自己定义的一个非工业标准varchar，不同在于，varchar2用null代替varchar的空字符串 
	varchar/varchar2适用于长度不固定的，一般不含中文的情况 
	
	3.nvarchar/nvarchar2 
	nvarchar和nvarchar2是长度不固定的，不区分中英文，其长度定义的是字符数
	nvarchar不区分中英文，比如说：你定义了nvarchar(20),你可以存入20个英文字母/汉字或中英文组合，这个20定义的是字符数而不是字节数 
	nvarchar2基本上等同于nvarchar，不同在于nvarchar2中存的英文字母也占两个字节 
	nvarchar/nvarchar2适用于存放中文 
	
选择char还是选择varchar的建议 
    1.适宜于char的情况： 
     a. 列中的各行数据长度基本一致，长度变化不超过50字节； 
     b. 数据变更频繁，数据检索的需求较少。 
     c. 列的长度不会变化，修改char类型列的宽度的代价比较大。 
     d. 列中不会出现大量的NULL值。 
     e. 列上不需要建立过多的索引，过多的索引对char列的数据变更影响较大。 

    2.适宜于varchar的情况; 
     a. 列中的各行数据的长度差异比较大。 
     b. 列中数据的更新非常少，但查询非常频繁。 
     c. 列中经常没有数据，为NULL值或为空值 varchar存null值不占空间
 
占用长度的比较：
1.CHAR(size)和VARCHAR(size)的区别 
    CHAR为定长的字段，最大长度为2K字节；    VARCHAR为可变长的字段，最大长度为4K字节； 

2.CHAR(size)和NCHAR(size)的区别 
    CHAR如果存放字母数字占1个字节，存放GBK编码的汉字存放2个字节，存放UTF-8编码的汉字占用3个字节； 
    NCHAR根据所选字符集来定义存放字符的占用字节数，一般都为2个字节存放一个字符(不管字符或者汉字) 

3.VARCHAR(size)和VARCHAR2(size)的区别 
后者把所有字符都占两字节，前者只对汉字和全角等字符占两字节，如果存放的字符为中英文结合的数据，那么存放的字符个数不同，varchar多于varchar2；占用的最大长度为4K字节；推荐使用VARCHAR2； 

4.VARCHAR2(size)和NVARCHAR2(size)的区别 
    后者把所有字符都占两字节，前者只对汉字和全角等字符占两字节；（如果数据库字符集长度是2，则NVARCHAR2最大为2K） 
由于定义长度是字符数，nvarchar和nvarchar2定义相同的长度，如果数据既有中文又有英文和数字，则nvarchar占用的存储空间小于nvarchar2
	 
9.建过索引吗？什么情况下需要建立索引？优缺点
1).大表的数据查询 常用查询列上面 
储存可能会用分区表

优点：
•第一，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。 
•第二，可以大大加快 数据的检索速度，这也是创建索引的最主要的原因。 
•第三，可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。 
•第四，在使用分组和排序 子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。 
•第五，通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。 
缺点：
•第一，创建索引和维护索引要耗费时间，这种时间随着数据 量的增加而增加。 
•第二，索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。 
•第三，当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。



2).索引的管理成本
1、  存储索引的磁盘空间
2、  执行数据修改操作（INSERT、UPDATE、DELETE）产生的索引维护
3、  在数据处理时回需额外的回退空间。

3).分类：
索引按存储方法分类
	B*树索引	位图索引 	
索引按功能分类
	唯一索引 唯一索引有两个作用，一个是数据约束，一个是数据索引，其中数据约束主要用来保证数据的完整性，唯一索引产生的索引记录中每一条记录都对应一个唯一的ROWID。
	主关键字索引
	主关键字索引产生的索引同唯一索引，只不过它是在数据库建立主关键字时系统自动建立的。
	一般索引
	一般索引不产生数据约束作用，其功能主要是对字段建立索引表，以提高数据查询速度。
索引按索引对象分类
	单列索引（表单个字段的索引）
	多列索引（表多个字段的索引）
	函数索引（对字段进行函数运算的索引）	

4).什么情况下应该建立索引
表的主关键字 自动建立唯一索引	
表的字段唯一性约束
常用的直接条件查询的字段
查询中排序的字段 大大提高排序速度
查询中统计或分组统计的字段

•在经常需要搜索的列上，可以加快搜索的速度； 
•在作为主键的列上，强制该列的唯一性和组织表中数据的排列结构； 
•在经常用在连接的列上，这 些列主要是一些外键，可以加快连接的速度； 
•在经常需要根据范围进行搜索的列上创建索引，因为索引已经排序，其指定的范围是连续的； 
•在经常需要排序的列上创 建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间； 
•在经常使用在WHERE子句中的列上面创建索引，加快条件的判断速度。


5).什么情况下应不建或少建索引
表记录太少
经常插入、删除、修改的表 维护索引的成本比较高

6).如何快速新建大数据量表的索引
如果一个表的记录达到100万以上的话，要对其中一个字段建索引可能要花很长的时间，甚至导致服务器数据库死机，因为在建索引的时候ORACLE要将索引字段所有的内容取出并进行全面排序，数据量大的话可能导致服务器排序内存不足而引用磁盘交换空间进行，这将严重影响服务器数据库的工作。
解决方法是增大数据库启动初始化中的排序内存参数，如果要进行大量的索引修改可以设置10M以上的排序内存（ORACLE缺省大小为64K），在索引建立完成后应将参数修改回来，因为在实际OLTP数据库应用中一般不会用到这么大的排序内存。
	
10.索引的作用？为什么能够提高查询速度？（索引的原理）
索引是提高数据查询最有效的方法，也是最难全面掌握的技术，因为正确的索引可能使效率提高10000倍，而无效的索引可能是浪费了数据库空间，甚至大大降低查询性能。
索引就是通过事先排好序，从而在查找时可以应用二分查找等高效率的算法。
一般的顺序查找，复杂度为O(n)，而二分查找复杂度为O(log2n)。当n很大时，二者的效率相差及其悬殊。

举个例子：表中有一百万条数据，需要在其中寻找一条特定id的数据。如果顺序查找，平均需要查找50万条数据。而用二分法，至多不超过20次就能找到。二者的效率差了2.5万倍！

12.在sql语句中加上字符集的方法。
关于MySQL的中文问题 
解决乱码的方法是，在执行SQL语句之前，将MySQL以下三个系统参数设置为与服务器字符集character-set-server相同的字符集。 
character_set_client：客户端的字符集。 
character_set_results：结果字符集。 
character_set_connection：连接字符集。 
设置这三个系统参数通过向MySQL发送语句：set names gb2312 

DEFAULT CHARACTER SET utf8 ；
CHARACTER SET utf8 COLLATE utf8_general_ci;
-- 修改表编码
alter table tbtest character set utf8 COLLATE utf8_general_ci;
-- 修改字段编码
ALTER TABLE tbtest MODIFY email VARCHAR(60) CHARACTER SET utf8 COLLATE utf8_general_ci;
-- 查看某字段使用的编码：
SELECT CHARSET(email) FROM tbtest;

13.数据库隔离级别介绍、举例说明。
1)问题
对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:
•	脏读: 对于两个事物 T1, T2, T1 读取了已经被 T2 更新但还没有被提交的字段. 之后, 若 T2 回滚, T1读取的内容就是临时且无效的.
•	不可重复读: 对于两个事物 T1, T2, T1 读取了一个字段, 然后 T2 更新了该字段. 之后, T1再次读取同一个字段, 值就不同了.
•	幻读: 对于两个事物 T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中插入了一些新的行. 之后, 如果 T1 再次读取同一个表, 就会多出几行.

2).定义
数据库事务的隔离性: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题. 
一个事务与其他事务隔离的程度称为隔离级别. 数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, 隔离级别越高, 数据一致性就越好, 但并发性越弱

3).级别分类
数据库提供了4中隔离级别：
隔离级别	描述
READ UNCOMMITTED(读未提交数据)	允许事务读取未被其他事务提交的变更，脏读、不可重复读和幻读的问题都会出现
READ COMMITED(读已提交数据)	只允许事务读取已经被其他事务提交的变更，可以避免脏读，但不可重复读和幻读问题仍然会出现
REPEATABLE READ(可重复读)	确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间，禁止其他事务对这个字段进行更新，可以避免脏读和不可重复读，但幻读的问题依然存在

SERIALIZABLE(串行化)	确保事务可以从一个表中读取相同的行，在这个事务持续期间，禁止其他事务对该表执行插入、更新和删除操作，所有并发问题都可以避免，但性能十分低
Oracle 支持的 2 种事务隔离级别：READ COMMITED, SERIALIZABLE. Oracle 默认的事务隔离级别为: READ COMMITED 
Mysql 支持 4 中事务隔离级别. Mysql 默认的事务隔离级别为: REPEATABLE READ

14.乐观锁和悲观锁的区别
悲观锁(Pessimistic Lock), 顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会block直到它拿到锁。传统的关系型数据库里边就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在做操作之前先上锁。

乐观锁(Optimistic Lock), 顾名思义，就是很乐观，每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量，像数据库如果提供类似于write_condition机制的其实都是提供的乐观锁。

两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下，即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。
但如果经常产生冲突，上层应用会不断的进行retry，这样反倒是降低了性能，所以这种情况下用悲观锁就比较合适。
query.setLockMode("user",LockMode.UPGRADE); // 加锁 

在Hibernate的配置文件中可以显示的配置数据库事务隔离级别。每一个隔离级别用一个整数表示：
8 - Serializable 串行化
4 - Repeatable Read 可重复读
2 - Read Commited 可读已提交
1 - Read Uncommited 可读未提交 
在hibernate.cfg.xml中使用hibernate.connection.isolation参数配置数据库事务隔离级别。

15.子查询与连表查询的区别

其实表链接查询和子查询的使用也是要视具体情况而定的。
表链接查询不适合用于太多表进行链接查询，这样会严重影响速度的。
太多表进行关联查询时，有些则可以使用子查询来代替，子查询在汇总统计方面也有很广泛的用途

一般来说，表连接查询都可以用子查询替换，但反过来说却不一定，有的子查询不能用表连接来替换， 举个栗子：
比如说有2张表，一个表(useinfo 学员信息)，包含字段userid(int),username(varhcar 50).  一个表(useinfo 学员成绩表)，包含字段scoreId(int),userid(int),score(varhcar 50).
如果要连表查询没参加考试学员的信息。
1）用子查询： select userid, username from useinfo where userid not in(select userid  from score).                        假设useinfo 有4条数据，scroe表有3条数据，说明有1名同学没参加考试。
用子查询就能查  出没参加考试人的信息。
2）用连表查询  select * from userinfo ,scroe where userinfo.id<> scroe.userinfo 
假设useinfo有4条数据，scroe表有3条数据，说明有1名同学没参加考试。
这时用连表查询，查出的结果为9条记录，显然不正确，这时子查询就不能被连表查询替换。因为连表查询结果是总结果4*3-3（匹配的结果）=9.